buildscript {
	ext {
		kotlinVersion = '1.1.2'
		springBootVersion = '1.5.3.RELEASE'
		droolsVersion = '6.1.0.Final'
		optaplannerVersion = '7.0.0.Final'
	}
	repositories {
		mavenCentral()
		maven {
        		url 'https://repository.jboss.org/nexus/content/groups/public/'
    		}
	}
	dependencies {
		classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
		classpath("org.jetbrains.kotlin:kotlin-gradle-plugin:${kotlinVersion}")
		classpath("org.jetbrains.kotlin:kotlin-allopen:${kotlinVersion}")
	}
}

apply plugin: 'kotlin'
apply plugin: 'kotlin-spring'
apply plugin: 'eclipse-wtp'
apply plugin: 'org.springframework.boot'
apply plugin: 'war'

version = '0.0.1-SNAPSHOT'
sourceCompatibility = 1.8
compileKotlin {
	kotlinOptions.jvmTarget = "1.8"
}
compileTestKotlin {
	kotlinOptions.jvmTarget = "1.8"
}

repositories {
	
	mavenCentral()
	maven {
		url 'https://repository.jboss.org/nexus/content/groups/public/'
	}
}

configurations {
	providedRuntime
}

dependencies {
	compile('org.springframework.boot:spring-boot-starter-data-mongodb')
	compile('org.springframework.boot:spring-boot-starter-jersey')
	compile('org.springframework.boot:spring-boot-starter-web')
	compile('org.springframework.boot:spring-boot-starter-websocket')
	compile("org.jetbrains.kotlin:kotlin-stdlib-jre8:${kotlinVersion}")
	compile("org.jetbrains.kotlin:kotlin-reflect:${kotlinVersion}")
	providedRuntime('org.springframework.boot:spring-boot-starter-tomcat')
	testCompile('org.springframework.boot:spring-boot-starter-test')
	compile "org.kie:kie-api:${droolsVersion}"
    	compile "org.drools:drools-compiler:${droolsVersion}"
    	compile "ch.qos.logback:logback-classic:1.1.+"
    	compile "org.slf4j:slf4j-api:1.7.+"
	compile "org.optaplanner:optaplanner-core:${optaplannerVersion}"
}

task showMeCache << {
  configurations.compile.each { println it }
}
